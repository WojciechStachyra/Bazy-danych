#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <random>
using namespace std;
using namespace std::chrono;


template<typename PQ>
void benchmark(const vector<pair<int, int>>& items, const string& name) {
    PQ pq;

    auto start = high_resolution_clock::now();
    for (auto& it : items) {
        pq.push(it.first, it.second);
    }
    auto mid1 = high_resolution_clock::now();

    for (int i = 0; i < 1000; ++i) {
        pq.peek();
    }
    auto mid2 = high_resolution_clock::now();

    for (int i = 0; i < 1000; ++i) {
        pq.modify(i, items[i].second);
    }
    auto mid3 = high_resolution_clock::now();

    for (int i = 0; i < 1000; ++i) {
        pq.pop();
    }
    auto end = high_resolution_clock::now();

    auto us_push = duration_cast<microseconds>(mid1 - start).count();
    auto us_peek = duration_cast<microseconds>(mid2 - mid1).count();
    auto us_modify = duration_cast<microseconds>(mid3 - mid2).count();
    auto us_pop = duration_cast<microseconds>(end - mid3).count();

    cout << name
        << " | push: " << us_push << " micro sec"
        << " | peek: " << us_peek << " micro sec"
        << " | modify: " << us_modify << " micro sec"
        << " | pop: " << us_pop << " micro sec"
        << " | size: " << pq.size() << endl;
}


template<typename T>
class UnsortedPQ {
    vector<pair<int, T>> data;
public:
    void push(const T& value, int priority) {
        data.emplace_back(priority, value);
    }
    void pop() {
        if (data.empty()) return;
        auto it = max_element(data.begin(), data.end(),
            [](auto& a, auto& b) { return a.first < b.first; });
        data.erase(it);
    }
    const T& peek() const {
        auto it = max_element(data.begin(), data.end(),
            [](auto& a, auto& b) { return a.first < b.first; });
        return it->second;
    }
    size_t size() const { return data.size(); }
    bool modify(const T& value, int new_priority) {
        for (auto& p : data) {
            if (p.second == value) {
                p.first = new_priority;
                return true;
            }
        }
        return false;
    }
};


template<typename T>
class HeapPQ {
    vector<pair<int, T>> data;
public:
    void push(const T& value, int priority) {
        data.emplace_back(priority, value);
        push_heap(data.begin(), data.end(),
            [](auto& a, auto& b) { return a.first < b.first; });
    }
    void pop() {
        if (data.empty()) return;
        pop_heap(data.begin(), data.end(),
            [](auto& a, auto& b) { return a.first < b.first; });
        data.pop_back();
    }
    const T& peek() const {
        return data.front().second;
    }
    size_t size() const { return data.size(); }
    bool modify(const T& value, int new_priority) {
        for (size_t i = 0; i < data.size(); ++i) {
            if (data[i].second == value) {
                data[i].first = new_priority;
                make_heap(data.begin(), data.end(), [](auto& a, auto& b) { return a.first < b.first; });
                return true;
            }
        }
        return false;
    }
};

int main() {
    const int N = 1000000;
    vector<pair<int, int>> items;
    items.reserve(N);
    mt19937 gen(0);
    uniform_int_distribution<> prio(1, 1000000);
    for (int i = 0; i < N; ++i) {
        items.emplace_back(i, prio(gen));
    }

    
    benchmark<UnsortedPQ<int>>(items, "UnsortedPQ");
    benchmark<HeapPQ<int>>(items, "HeapPQ");

    return 0;
}
